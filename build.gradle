class Version {
    static final code = 1
    static final name = "1.0.0"
}

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {

    //コピペを簡便にするためのプロジェクトテンプレートにあるライブラリ専用のバージョン置き場
    ext.kotlin_version = "1.6.10"
    ext.coroutine_version = "1.6.0"
    ext.hilt_version = "2.40.5"
    ext.nav_version = "2.4.0"
    ext.lifecycle_version = "2.4.1"
    ext.timber_version = "5.0.1"
    ext.appcompat_version = "1.4.1"
    ext.material_version = "1.5.0"
    ext.viewpager2_version = "1.0.0"
    ext.recyclerview_version = "1.2.1"
    ext.constraintlayout_version = "2.1.3"
    ext.security_version = "1.0.0"
    ext.glide_version = "4.12.0"
    ext.retrofit_version = "2.9.0"
    ext.okhttp_version = '4.9.3'
    ext.serialization_version = '1.3.2'
    ext.serialization_converter_version = '0.8.0'
    ext.compose_version = '1.0.5'
    ext.accompanist_version = '0.20.3'

    repositories {
        mavenCentral()
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:7.1.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"
        classpath "com.google.dagger:hilt-android-gradle-plugin:$hilt_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath 'com.google.gms:google-services:4.3.10'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.8.1'
    }
}

subprojects {
    afterEvaluate { subProject ->
        if (subProject.hasProperty('android')) {
            try {
                android {
                    flavorDimensions "environment"
                    buildTypes {
                        create("mock") {}
                    }
                    productFlavors {
                        create("dev") {}
                        create("stg") {}
                        create("prod") {}
                    }
                }
            } catch (Exception e) {
            }

            dependencies {

                implementation "com.jakewharton.timber:timber:$timber_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
                implementation "androidx.compose.runtime:runtime:$compose_version"
                implementation platform('com.google.firebase:firebase-bom:29.1.0')

                switch (subProject.getPath()) {
                    case ":app":
                        implementation 'com.google.firebase:firebase-messaging-ktx'
                        break

                    case ":presentation:view:core":
                        api "androidx.constraintlayout:constraintlayout:$constraintlayout_version"
                        // compose
                        api "androidx.compose.ui:ui:$compose_version"
                        api "androidx.compose.material:material:$compose_version"
                        api "androidx.compose.ui:ui-tooling-preview:$compose_version"
                        api 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.0'
                        androidTestApi "androidx.compose.ui:ui-test-junit4:$compose_version"
                        debugApi "androidx.compose.ui:ui-tooling:$compose_version"
                        break

                    case ":extension:compose":
                        api "androidx.constraintlayout:constraintlayout:$constraintlayout_version"
                        // compose
                        api "androidx.compose.ui:ui:$compose_version"
                        api "androidx.compose.material:material:$compose_version"
                        api "androidx.compose.ui:ui-tooling-preview:$compose_version"
                        api 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
                        api "com.google.android.material:material:$material_version"
                        api "com.google.accompanist:accompanist-insets:$accompanist_version"
                        api "com.google.accompanist:accompanist-insets-ui:$accompanist_version"
                        api "com.google.accompanist:accompanist-pager:$accompanist_version"
                        api "com.google.accompanist:accompanist-pager-indicators:$accompanist_version"
                        androidTestApi "androidx.compose.ui:ui-test-junit4:$compose_version"
                        debugApi "androidx.compose.ui:ui-tooling:$compose_version"
                        mockApi "androidx.compose.ui:ui-tooling:$compose_version"
                        break

                    case ":extension:view":
                        api project(':extension:viewModel')
                        api "androidx.appcompat:appcompat:$appcompat_version"
                        kapt "com.github.bumptech.glide:compiler:$glide_version"
                        api "com.github.bumptech.glide:glide:$glide_version"
                        api "androidx.viewpager2:viewpager2:$viewpager2_version"
                        api "com.google.android.material:material:$material_version"
                        api "androidx.navigation:navigation-ui-ktx:$nav_version"
                        break

                    case ":presentation:viewModel:core":
                        api "androidx.lifecycle:lifecycle-viewmodel-compose:2.4.0"
                        api "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
                        api "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
                        break

                    case ":extension:viewModel":
                        dependencies {
                            api "androidx.recyclerview:recyclerview:$recyclerview_version"
                            api "androidx.navigation:navigation-fragment-ktx:$nav_version"
                        }
                        break

                    case ":dataStore:repository:core":
                        implementation "androidx.security:security-crypto:$security_version"
                        break

                    case ":dataStore:gateway:server":
                        mockImplementation "com.squareup.retrofit2:retrofit-mock:$retrofit_version"
                        implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version"
                        implementation("com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:$serialization_converter_version")
                        break

                    case ":domain:useCase:core":
                        api "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
                        break

                    case ":extension:gateway":
                        dependencies {
                            implementation 'com.google.firebase:firebase-messaging-ktx'
                            implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
                            api "com.squareup.retrofit2:retrofit:$retrofit_version"
                            implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
                            implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
                        }
                        break
                }
            }

            android {
                def version = new Version()
                compileSdkVersion 31
                defaultConfig {
                    versionCode = version.code
                    versionName = version.name
                    targetSdkVersion 31
                    buildConfigField("String", "APP_VERSION", "\"" + versionName + "\"")
                }
                kotlinOptions {
                    jvmTarget = '1.8'
                    useIR = true
                }
                buildFeatures {
                    compose true
                    dataBinding true
                    viewBinding true
                }
                composeOptions {
                    kotlinCompilerExtensionVersion compose_version
                }
            }
        }
    }
}

allprojects {
    repositories {
        mavenCentral()
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * コンパイルタスク分離
 */
tasks.withType(JavaCompile) {
    options.incremental = true
    options.fork = true
}

/**
 * テストタスク分離
 */
tasks.withType(Test) {
    def maxCount = gradle.startParameter.maxWorkerCount
    maxParallelForks = (maxCount < 2) ? 1 : maxCount / 2
    forkEvery = 100
}